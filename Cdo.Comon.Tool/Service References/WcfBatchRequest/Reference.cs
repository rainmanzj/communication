//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cdo.Comon.Tool.WcfBatchRequest {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfBatchRequest.IUpLoadService")]
    public interface IUpLoadService {
        
        // CODEGEN: 消息 FileUploadMessage 的包装名称(FileUploadMessage)以后生成的消息协定与默认值(UploadFile)不匹配
        [System.ServiceModel.OperationContractAttribute(Action="UploadFile", ReplyAction="http://tempuri.org/IUpLoadService/UploadFileResponse")]
        Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage UploadFile(Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(Action="UploadFile", ReplyAction="http://tempuri.org/IUpLoadService/UploadFileResponse")]
        System.Threading.Tasks.Task<Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage> UploadFileAsync(Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string SavePath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Tranter;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Tranters;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int length;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, string SavePath, long Tranter, long Tranters, int length, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.SavePath = SavePath;
            this.Tranter = Tranter;
            this.Tranters = Tranters;
            this.length = length;
            this.FileData = FileData;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileReturnMessage", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class FileReturnMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool IsOk;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Tranter;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Tranters;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string MsgData;
        
        public FileReturnMessage() {
        }
        
        public FileReturnMessage(string FileName, bool IsOk, long Tranter, long Tranters, string MsgData) {
            this.FileName = FileName;
            this.IsOk = IsOk;
            this.Tranter = Tranter;
            this.Tranters = Tranters;
            this.MsgData = MsgData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUpLoadServiceChannel : Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpLoadServiceClient : System.ServiceModel.ClientBase<Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService>, Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService {
        
        public UpLoadServiceClient() {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpLoadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService.UploadFile(Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(ref string FileName, string SavePath, ref long Tranter, ref long Tranters, int length, System.IO.Stream FileData, out string MsgData) {
            Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage inValue = new Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.SavePath = SavePath;
            inValue.Tranter = Tranter;
            inValue.Tranters = Tranters;
            inValue.length = length;
            inValue.FileData = FileData;
            Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage retVal = ((Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService)(this)).UploadFile(inValue);
            FileName = retVal.FileName;
            Tranter = retVal.Tranter;
            Tranters = retVal.Tranters;
            MsgData = retVal.MsgData;
            return retVal.IsOk;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage> Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService.UploadFileAsync(Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage request) {
            return base.Channel.UploadFileAsync(request);
        }
        
        public System.Threading.Tasks.Task<Cdo.Comon.Tool.WcfBatchRequest.FileReturnMessage> UploadFileAsync(string FileName, string SavePath, long Tranter, long Tranters, int length, System.IO.Stream FileData) {
            Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage inValue = new Cdo.Comon.Tool.WcfBatchRequest.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.SavePath = SavePath;
            inValue.Tranter = Tranter;
            inValue.Tranters = Tranters;
            inValue.length = length;
            inValue.FileData = FileData;
            return ((Cdo.Comon.Tool.WcfBatchRequest.IUpLoadService)(this)).UploadFileAsync(inValue);
        }
    }
}
